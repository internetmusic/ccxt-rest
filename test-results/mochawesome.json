{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2020-07-28T14:15:56.013Z",
    "end": "2020-07-28T14:15:56.633Z",
    "duration": 620,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "884e6d45-b2ca-4ed8-9748-81b6b735d096",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "849914c3-d5cf-4192-a598-729ff3d45162",
        "title": "> controllers",
        "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
        "file": "/test/api/controllers/exchange.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "> controllers \"before all\" hook",
            "timedOut": false,
            "duration": 392,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}\nreturn new Promise((resolve) => {\n  ccxtServer.start(_server => {\n    server = _server\n    resolve();\n  })  \n})",
            "err": {},
            "isRoot": false,
            "uuid": "47e6b2e4-2c4e-4b84-be8a-5deb1348e6d3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "> controllers \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (server) {\n  server.close()\n}\nif (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2e489d4d-74f9-4c44-a6e9-eaf998914369",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "58c14c3c-58c8-4ab2-bfbc-ac23d9b7ec72",
            "title": "> exchanges",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "aec822a9-67ae-46c4-8720-effdd3833d6f",
                "title": "> GET /exchanges",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "> should return list of exchanges",
                    "fullTitle": "> controllers > exchanges > GET /exchanges > should return list of exchanges",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(server)\n          .get('/exchanges')\n          .expect('Content-Type', /json/)\n          .expect(200)\n          .end(function(err, res) {\n            should.not.exist(err);\n            res.body.should.eql(exchangeConfig.exchanges.map(i => '' + i));\n            done();\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4101d9c9-c233-4c47-9594-39d96f5c90a0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4101d9c9-c233-4c47-9594-39d96f5c90a0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 37,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8856ffb6-b645-428b-80fb-c888302f2b5f",
            "title": "> exchange",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f0e48f9f-3cf5-4852-941d-20da7c71cd5a",
                "title": "> Given unsupported exchange name",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "8bda32eb-1b8d-4fe3-b78b-e4f9a4facd13",
                    "title": "> [Unsupported Exchange name] Exchange Management API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > GET:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .get('/exchange/nonExistentExchangeName')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8b03cda8-6364-43c3-8377-cb2c332dd544",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > POST:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName')\n  .send({id:'nonExistentExchangeName1'})\n  .set('Accept', 'application/json')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "86365cd7-a657-4112-8d64-8ac17a52590b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8b03cda8-6364-43c3-8377-cb2c332dd544",
                      "86365cd7-a657-4112-8d64-8ac17a52590b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 38,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "22d2e9ad-a5b1-4cc3-b538-d355bbb6c513",
                    "title": "> [Unsupported Exchange Name] Public Data API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n              .get('/exchange/nonExistentExchangeName/markets')\n              .expect('Content-Type', /json/)\n              .expect(404)\n              .end((err, res) => {\n                should.not.exist(err);\n                done();\n              })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e061c7f-48a9-4212-ba8c-e4aed671aef6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/orderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c786b7c7-09bb-403d-bd55-71cef234a1d3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/l2OrderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9148003-71ac-4b96-a3af-36171565b636",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/trades')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e942e1e3-d1e8-475b-a079-45a8ec4467e7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/ticker')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cc0bfff2-6f3f-4575-be85-11f59409593b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/tickers')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "31ad2a35-2086-486f-8c71-71cafaf58f34",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .post('/exchange/nonExistentExchangeName/_/loadMarkets')\n    .type('text')\n    .send(JSON.stringify([true]))\n    .set('Accept', 'application/json')\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e8571d48-4562-4aa0-aa2a-89239a8b0b6f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "3e061c7f-48a9-4212-ba8c-e4aed671aef6",
                      "c786b7c7-09bb-403d-bd55-71cef234a1d3",
                      "f9148003-71ac-4b96-a3af-36171565b636",
                      "e942e1e3-d1e8-475b-a079-45a8ec4467e7",
                      "cc0bfff2-6f3f-4575-be85-11f59409593b",
                      "31ad2a35-2086-486f-8c71-71cafaf58f34",
                      "e8571d48-4562-4aa0-aa2a-89239a8b0b6f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 63,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "36014d37-6093-45ea-8b16-ab0a3e5dff9a",
                    "title": "> [Unsupported Exchange Name] Private Data APIs",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/balances')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61d31b9c-483c-46b4-9754-dc60d2267f7c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Place order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Place order then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName/order')\n  .send({ symbol: 'BTC/ETH', type: 'limit', side: 'buy', amount:0, price:0 })\n  .set('Accept', 'application/json')\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f75a6351-f6ec-4fac-87cb-c0b82c7e2e6a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Cancel order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Cancel order then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .delete('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "af2cf75f-1373-43e7-a7d9-1437bed9a4de",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get order then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "37ce8582-723b-42a6-bdca-07d8cf08dec6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get orders then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1e50bee5-1f82-48fa-acbe-df2a87113da1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get open orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get open orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/open')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d507edf6-90e4-4039-9d15-5008c7ee61bb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get closed orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get closed orders then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/closed')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f2baf0a3-a7ef-48e6-9fef-a9e31bb87060",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get my trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get my trades then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/trades/mine')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a842e08d-2a82-4ed5-95c0-8fe178ce3c9d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "61d31b9c-483c-46b4-9754-dc60d2267f7c",
                      "f75a6351-f6ec-4fac-87cb-c0b82c7e2e6a",
                      "af2cf75f-1373-43e7-a7d9-1437bed9a4de",
                      "37ce8582-723b-42a6-bdca-07d8cf08dec6",
                      "1e50bee5-1f82-48fa-acbe-df2a87113da1",
                      "d507edf6-90e4-4039-9d15-5008c7ee61bb",
                      "f2baf0a3-a7ef-48e6-9fef-a9e31bb87060",
                      "a842e08d-2a82-4ed5-95c0-8fe178ce3c9d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 61,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2020
}